#!/bin/bash
# Multi-Profile VPN - CLI Semi-GUI Menu System

# Load config
if [ -f /etc/vpn-system.conf ]; then
    source /etc/vpn-system.conf
fi

DB_PATH="${DB_PATH:-/opt/multi-profile-vpn/data/app.db}"
VPN_HOME="${VPN_HOME:-/opt/multi-profile-vpn}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
NC='\033[0m'

# Get system info
get_cpu_usage() {
    top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1
}

get_cpu_cores() {
    nproc
}

get_ram_usage() {
    free -m | awk 'NR==2{printf "%s/%s MB", $3, $2}'
}

get_storage_usage() {
    df -h / | awk 'NR==2{printf "%s/%s", $3, $2}'
}

get_total_profiles() {
    sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM profiles WHERE status='active';" 2>/dev/null || echo "0"
}

# Display header with system info
show_header() {
    clear
    local cpu=$(get_cpu_usage)
    local cores=$(get_cpu_cores)
    local ram=$(get_ram_usage)
    local storage=$(get_storage_usage)
    local profiles=$(get_total_profiles)
    
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                                                          ║${NC}"
    echo -e "${CYAN}║           ${WHITE}MULTI-PROFILE VPN MANAGEMENT${CYAN}                ║${NC}"
    echo -e "${CYAN}║                                                          ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BLUE}╔══════════════════ ${WHITE}SYSTEM INFO${BLUE} ══════════════════════╗${NC}"
    echo -e "${BLUE}║${NC}  CPU      : ${GREEN}$cpu%${NC} / ${CYAN}$(($cores * 100))%${NC} (${cores} cores)"
    echo -e "${BLUE}║${NC}  RAM      : ${GREEN}$ram${NC}"
    echo -e "${BLUE}║${NC}  Storage  : ${GREEN}$storage${NC}"
    echo -e "${BLUE}║${NC}  Profiles : ${YELLOW}$profiles${NC} active"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
}

# Main menu
show_main_menu() {
    show_header
    echo -e "${CYAN}╔══════════════════ ${WHITE}MAIN MENU${CYAN} ═══════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}                                                          ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}1)${NC} Create Profile       ${BLUE}# Create new VPN profile${NC}    ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}2)${NC} Delete Profile       ${BLUE}# Remove existing profile${NC}   ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}3)${NC} List Profiles        ${BLUE}# View all profiles${NC}         ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}4)${NC} Extend Days          ${BLUE}# Add more days${NC}             ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}5)${NC} Extend Bandwidth     ${BLUE}# Add more bandwidth (TB)${NC}  ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}6)${NC} Login Profile        ${BLUE}# SSH to profile (no pwd)${NC}  ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                                                          ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${YELLOW}7)${NC} Security Hardening   ${BLUE}# Apply security fixes${NC}     ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${YELLOW}8)${NC} Monitoring           ${BLUE}# View dashboard${NC}            ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${YELLOW}9)${NC} Backup Management    ${BLUE}# Backup/Restore${NC}           ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                                                          ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}  ${RED}0)${NC} Exit                                                 ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}                                                          ${CYAN}║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -ne "${WHITE}Select option [0-9]: ${NC}"
}

# List profiles dengan detail
list_profiles() {
    show_header
    echo -e "${CYAN}╔══════════════════ ${WHITE}PROFILE LIST${CYAN} ════════════════════╗${NC}"
    echo ""
    
    local profiles=$(sqlite3 "$DB_PATH" "SELECT name, ssh_port, quota_used_gb, bandwidth_quota_gb, expiry_date, status FROM profiles ORDER BY created_at DESC;" 2>/dev/null)
    
    if [ -z "$profiles" ]; then
        echo -e "${YELLOW}  No profiles found${NC}"
        echo ""
    else
        echo -e "${BLUE}┌────────────────────────────────────────────────────────────┐${NC}"
        printf "${WHITE}%-15s %-20s %-20s %-15s${NC}\n" "NAME" "ACCESS" "BANDWIDTH" "EXPIRES"
        echo -e "${BLUE}├────────────────────────────────────────────────────────────┤${NC}"
        
        echo "$profiles" | while IFS='|' read -r name port used quota expiry status; do
            # Calculate days remaining
            if [ -n "$expiry" ]; then
                local now=$(date +%s)
                local exp=$(date -d "$expiry" +%s 2>/dev/null || echo "$now")
                local days_left=$(( ($exp - $now) / 86400 ))
                
                if [ $days_left -lt 0 ]; then
                    local days_str="${RED}EXPIRED${NC}"
                elif [ $days_left -lt 3 ]; then
                    local days_str="${RED}${days_left} days${NC}"
                elif [ $days_left -lt 7 ]; then
                    local days_str="${YELLOW}${days_left} days${NC}"
                else
                    local days_str="${GREEN}${days_left} days${NC}"
                fi
            else
                local days_str="${CYAN}No expiry${NC}"
            fi
            
            # Calculate bandwidth percentage
            local bw_percent=$(echo "scale=1; ($used / $quota) * 100" | bc 2>/dev/null || echo "0")
            local used_tb=$(echo "scale=2; $used / 1024" | bc 2>/dev/null || echo "0")
            local quota_tb=$(echo "scale=2; $quota / 1024" | bc 2>/dev/null || echo "0")
            local bw_display="${GREEN}${used_tb}TB${NC}/${CYAN}${quota_tb}TB${NC}"
            
            if [ $(echo "$bw_percent > 90" | bc) -eq 1 ]; then
                bw_display="${RED}${used_tb}TB${NC}/${CYAN}${quota_tb}TB${NC}"
            elif [ $(echo "$bw_percent > 70" | bc) -eq 1 ]; then
                bw_display="${YELLOW}${used_tb}TB${NC}/${CYAN}${quota_tb}TB${NC}"
            fi
            
            # Get server IP
            local server_ip=$(hostname -I | awk '{print $1}')
            local access="${CYAN}${server_ip}:${port}${NC}"
            
            printf "${WHITE}%-15s${NC} %-30s %-30s %-25s\n" "$name" "$access" "$bw_display" "$days_str"
        done
        
        echo -e "${BLUE}└────────────────────────────────────────────────────────────┘${NC}"
    fi
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Create profile (interactive)
create_profile() {
    show_header
    echo -e "${GREEN}╔══════════════════ ${WHITE}CREATE PROFILE${GREEN} ═══════════════════╗${NC}"
    echo ""
    
    # Just call the actual script
    "$VPN_HOME/scripts/profile-create"
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Delete profile
delete_profile() {
    show_header
    echo -e "${RED}╔══════════════════ ${WHITE}DELETE PROFILE${RED} ═══════════════════╗${NC}"
    echo ""
    
    # Show profiles first
    local profiles=$(sqlite3 "$DB_PATH" "SELECT name FROM profiles ORDER BY name;" 2>/dev/null)
    
    if [ -z "$profiles" ]; then
        echo -e "${YELLOW}  No profiles to delete${NC}"
        echo ""
        echo -ne "${WHITE}Press Enter to continue...${NC}"
        read
        return
    fi
    
    echo -e "${WHITE}Available profiles:${NC}"
    echo "$profiles" | nl -w2 -s') '
    echo ""
    
    echo -ne "${WHITE}Enter profile name to delete: ${NC}"
    read profile_name
    
    if [ -n "$profile_name" ]; then
        "$VPN_HOME/scripts/profile-delete" "$profile_name"
    fi
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Extend days
extend_days() {
    show_header
    echo -e "${YELLOW}╔══════════════════ ${WHITE}EXTEND DAYS${YELLOW} ════════════════════╗${NC}"
    echo ""
    
    echo -ne "${WHITE}Profile name: ${NC}"
    read profile_name
    
    echo -ne "${WHITE}Add days: ${NC}"
    read days
    
    if [ -n "$profile_name" ] && [ -n "$days" ]; then
        "$VPN_HOME/scripts/profile-extend-expiry" "$profile_name" "$days"
    fi
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Extend bandwidth
extend_bandwidth() {
    show_header
    echo -e "${YELLOW}╔══════════════════ ${WHITE}EXTEND BANDWIDTH${YELLOW} ══════════════╗${NC}"
    echo ""
    
    echo -ne "${WHITE}Profile name: ${NC}"
    read profile_name
    
    echo -ne "${WHITE}Add bandwidth (TB): ${NC}"
    read tb
    
    if [ -n "$profile_name" ] && [ -n "$tb" ]; then
        "$VPN_HOME/scripts/profile-extend-bandwidth" "$profile_name" "$tb"
    fi
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Login to profile
login_profile() {
    show_header
    echo -e "${CYAN}╔══════════════════ ${WHITE}LOGIN PROFILE${CYAN} ═══════════════════╗${NC}"
    echo ""
    
    local profiles=$(sqlite3 "$DB_PATH" "SELECT name, ssh_port FROM profiles ORDER BY name;" 2>/dev/null)
    
    if [ -z "$profiles" ]; then
        echo -e "${YELLOW}  No profiles available${NC}"
        echo ""
        echo -ne "${WHITE}Press Enter to continue...${NC}"
        read
        return
    fi
    
    echo -e "${WHITE}Available profiles:${NC}"
    echo "$profiles" | while IFS='|' read -r name port; do
        echo "  • $name (port: $port)"
    done
    echo ""
    
    echo -ne "${WHITE}Enter profile name: ${NC}"
    read profile_name
    
    if [ -n "$profile_name" ]; then
        local port=$(sqlite3 "$DB_PATH" "SELECT ssh_port FROM profiles WHERE name='$profile_name';" 2>/dev/null)
        if [ -n "$port" ]; then
            echo -e "${GREEN}Connecting to $profile_name...${NC}"
            ssh -o StrictHostKeyChecking=no -p "$port" root@localhost
        else
            echo -e "${RED}Profile not found!${NC}"
            sleep 2
        fi
    fi
}

# Security hardening
security_menu() {
    show_header
    echo -e "${YELLOW}╔══════════════════ ${WHITE}SECURITY${YELLOW} ══════════════════════╗${NC}"
    echo ""
    echo -e "  ${GREEN}1)${NC} Install Firewall"
    echo -e "  ${GREEN}2)${NC} Install Fail2ban"
    echo -e "  ${GREEN}3)${NC} SSH Hardening"
    echo -e "  ${GREEN}4)${NC} Nginx Hardening"
    echo -e "  ${GREEN}5)${NC} System Hardening"
    echo -e "  ${GREEN}6)${NC} Run Security Audit"
    echo -e "  ${RED}0)${NC} Back"
    echo ""
    echo -ne "${WHITE}Select [0-6]: ${NC}"
    read choice
    
    case $choice in
        1) "$VPN_HOME/scripts/firewall-setup" install ;;
        2) "$VPN_HOME/scripts/fail2ban-setup" install ;;
        3) "$VPN_HOME/scripts/ssh-hardening" install ;;
        4) "$VPN_HOME/scripts/nginx-hardening" install ;;
        5) "$VPN_HOME/scripts/system-hardening" ;;
        6) "$VPN_HOME/scripts/security-audit" ;;
        0) return ;;
    esac
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Monitoring
monitoring_menu() {
    show_header
    "$VPN_HOME/scripts/monitoring-dashboard"
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Backup
backup_menu() {
    show_header
    echo -e "${CYAN}╔══════════════════ ${WHITE}BACKUP${CYAN} ═══════════════════════════╗${NC}"
    echo ""
    echo -e "  ${GREEN}1)${NC} Backup Now"
    echo -e "  ${GREEN}2)${NC} Restore from Backup"
    echo -e "  ${GREEN}3)${NC} List Backups"
    echo -e "  ${RED}0)${NC} Back"
    echo ""
    echo -ne "${WHITE}Select [0-3]: ${NC}"
    read choice
    
    case $choice in
        1) "$VPN_HOME/scripts/backup-daemon" backup ;;
        2) 
            echo -ne "${WHITE}Backup file path: ${NC}"
            read backup_file
            "$VPN_HOME/scripts/profile-restore" "$backup_file"
            ;;
        3) ls -lh "$VPN_HOME/backups/" 2>/dev/null || echo "No backups found" ;;
        0) return ;;
    esac
    
    echo ""
    echo -ne "${WHITE}Press Enter to continue...${NC}"
    read
}

# Main loop
main() {
    while true; do
        show_main_menu
        read choice
        
        case $choice in
            1) create_profile ;;
            2) delete_profile ;;
            3) list_profiles ;;
            4) extend_days ;;
            5) extend_bandwidth ;;
            6) login_profile ;;
            7) security_menu ;;
            8) monitoring_menu ;;
            9) backup_menu ;;
            0) 
                clear
                echo -e "${GREEN}Goodbye!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}Invalid option!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Run
main
