#!/bin/bash
# Multi-Profile VPN - Create New Profile
# Backend script untuk create profile dengan Docker container

# Load config
if [ -f /etc/vpn-system.conf ]; then
    source /etc/vpn-system.conf
fi

VPN_HOME="${VPN_HOME:-/opt/multi-profile-vpn}"
DB_PATH="${DB_PATH:-$VPN_HOME/data/app.db}"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║              CREATE NEW VPN PROFILE                      ║${NC}"
echo -e "${CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
echo ""

# Input: Profile Name
echo -ne "${WHITE}Profile Name: ${NC}"
read PROFILE_NAME

if [ -z "$PROFILE_NAME" ]; then
    echo -e "${RED}Error: Profile name is required${NC}"
    exit 1
fi

# Check if profile exists
EXISTING=$(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM profiles WHERE name='$PROFILE_NAME';" 2>/dev/null)
if [ "$EXISTING" -gt 0 ]; then
    echo -e "${RED}Error: Profile '$PROFILE_NAME' already exists${NC}"
    exit 1
fi

# Input: Domain (optional)
echo -ne "${WHITE}Domain (optional, press Enter to skip): ${NC}"
read DOMAIN

# Input: SSH Port (auto or manual)
echo -ne "${WHITE}SSH Port [2200-2333] (press Enter for auto): ${NC}"
read SSH_PORT_INPUT

if [ -z "$SSH_PORT_INPUT" ]; then
    # Auto-assign port
    USED_PORTS=$(sqlite3 "$DB_PATH" "SELECT ssh_port FROM profiles;" 2>/dev/null | tr '\n' '|')
    for port in $(seq 2200 2333); do
        if ! echo "$USED_PORTS" | grep -q "$port"; then
            SSH_PORT=$port
            break
        fi
    done
    echo -e "${GREEN}Auto-assigned SSH Port: $SSH_PORT${NC}"
else
    # Manual port
    if [ "$SSH_PORT_INPUT" -ge 2200 ] && [ "$SSH_PORT_INPUT" -le 2333 ]; then
        # Check if port in use
        PORT_IN_USE=$(sqlite3 "$DB_PATH" "SELECT COUNT(*) FROM profiles WHERE ssh_port=$SSH_PORT_INPUT;" 2>/dev/null)
        if [ "$PORT_IN_USE" -gt 0 ]; then
            echo -e "${RED}Error: Port $SSH_PORT_INPUT already in use${NC}"
            exit 1
        fi
        SSH_PORT=$SSH_PORT_INPUT
    else
        echo -e "${RED}Error: Port must be between 2200-2333${NC}"
        exit 1
    fi
fi

# Input: Xray Port
echo -ne "${WHITE}Xray Port [443]: ${NC}"
read XRAY_PORT
XRAY_PORT=${XRAY_PORT:-443}

# Input: CPU Limit (percentage)
echo -ne "${WHITE}CPU Limit (%) [10]: ${NC}"
read CPU_PERCENT
CPU_PERCENT=${CPU_PERCENT:-10}

# Convert percentage to CPUs value
CPU_CORES=$(nproc)
CPU_VALUE=$(echo "scale=2; ($CPU_PERCENT / 100) * $CPU_CORES" | bc)

# Input: RAM Limit (MB)
echo -ne "${WHITE}RAM Limit (MB) [512]: ${NC}"
read RAM_MB
RAM_MB=${RAM_MB:-512}

# Input: Bandwidth Quota (TB)
echo -ne "${WHITE}Bandwidth Quota (TB) [1.0]: ${NC}"
read QUOTA_TB
QUOTA_TB=${QUOTA_TB:-1.0}
BANDWIDTH_QUOTA_GB=$(echo "$QUOTA_TB * 1024" | bc)

# Input: Expiry Days
echo -ne "${WHITE}Expiry Days [30]: ${NC}"
read EXPIRY_DAYS
EXPIRY_DAYS=${EXPIRY_DAYS:-30}
EXPIRY_DATE=$(date -d "+$EXPIRY_DAYS days" +"%Y-%m-%d")

echo ""
echo -e "${YELLOW}Creating profile...${NC}"

# Generate profile ID
PROFILE_ID=$(uuidgen 2>/dev/null || cat /proc/sys/kernel/random/uuid)

# Create Docker container
echo -e "${BLUE}[1/5]${NC} Creating Docker container..."

docker run -d \
    --name="vpn-$PROFILE_NAME" \
    --hostname="$PROFILE_NAME" \
    --cpus="$CPU_VALUE" \
    --memory="${RAM_MB}m" \
    -p ${SSH_PORT}:22 \
    -p ${XRAY_PORT}:${XRAY_PORT} \
    --restart=unless-stopped \
    vpn-profile-base:latest > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to create Docker container${NC}"
    exit 1
fi

echo -e "${GREEN}✓${NC} Container created"

# Insert into database
echo -e "${BLUE}[2/5]${NC} Updating database..."

sqlite3 "$DB_PATH" << EOF
INSERT INTO profiles (
    profile_id, name, domain, ssh_port, xray_port,
    cpu_percent, ram_mb, quota_tb, bandwidth_quota_gb,
    quota_used_gb, expiry_date, status
) VALUES (
    '$PROFILE_ID', '$PROFILE_NAME', '$DOMAIN', $SSH_PORT, $XRAY_PORT,
    $CPU_PERCENT, $RAM_MB, $QUOTA_TB, $BANDWIDTH_QUOTA_GB,
    0, '$EXPIRY_DATE', 'active'
);
EOF

if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to update database${NC}"
    docker rm -f "vpn-$PROFILE_NAME" > /dev/null 2>&1
    exit 1
fi

echo -e "${GREEN}✓${NC} Database updated"

# Copy container scripts
echo -e "${BLUE}[3/5]${NC} Installing container scripts..."

docker exec "vpn-$PROFILE_NAME" mkdir -p /root
docker cp "$VPN_HOME/profile-scripts/." "vpn-$PROFILE_NAME:/root/" > /dev/null 2>&1

echo -e "${GREEN}✓${NC} Scripts installed"

# Setup SSH keys for passwordless access
echo -e "${BLUE}[4/5]${NC} Setting up SSH keys..."

if [ ! -f /root/.ssh/id_rsa ]; then
    ssh-keygen -t rsa -N "" -f /root/.ssh/id_rsa > /dev/null 2>&1
fi

docker exec "vpn-$PROFILE_NAME" mkdir -p /root/.ssh
docker cp /root/.ssh/id_rsa.pub "vpn-$PROFILE_NAME:/root/.ssh/authorized_keys" > /dev/null 2>&1
docker exec "vpn-$PROFILE_NAME" chmod 600 /root/.ssh/authorized_keys

echo -e "${GREEN}✓${NC} SSH keys configured"

# Start services
echo -e "${BLUE}[5/5]${NC} Starting services..."

docker exec "vpn-$PROFILE_NAME" supervisorctl start all > /dev/null 2>&1

echo -e "${GREEN}✓${NC} Services started"

echo ""
echo -e "${GREEN}╔══════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║           PROFILE CREATED SUCCESSFULLY!                  ║${NC}"
echo -e "${GREEN}╚══════════════════════════════════════════════════════════╝${NC}"
echo ""
echo -e "${WHITE}Profile Details:${NC}"
echo -e "  Name        : ${CYAN}$PROFILE_NAME${NC}"
echo -e "  SSH Port    : ${CYAN}$SSH_PORT${NC}"
echo -e "  Xray Port   : ${CYAN}$XRAY_PORT${NC}"
echo -e "  CPU Limit   : ${CYAN}${CPU_PERCENT}%${NC} (${CPU_VALUE} cores)"
echo -e "  RAM Limit   : ${CYAN}${RAM_MB}MB${NC}"
echo -e "  Bandwidth   : ${CYAN}${QUOTA_TB}TB${NC}"
echo -e "  Expires     : ${CYAN}$EXPIRY_DATE${NC} (${EXPIRY_DAYS} days)"
echo ""
echo -e "${WHITE}Access:${NC}"
SERVER_IP=$(hostname -I | awk '{print $1}')
echo -e "  ${CYAN}ssh -p $SSH_PORT root@$SERVER_IP${NC}"
echo ""
